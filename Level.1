##  자릿수 더하기
        # 재귀함수!!
def sum_digit(number):
    '''number의 각 자릿수를 더해서 return하세요'''
    if number < 10:
        return number

    return number%10 + sum_digit(number//10)

print("결과 : {}".format(sum_digit(123)))

## 약수 더하기
def solution(n):
    answer = 0
    for i in range(1,n+1):
        if n % i == 0:
            answer += i
    return answer

## "p" , "y" 찾기
def numPY(s):
    # 함수를 완성하세요
    return s.lower().count('p') == s.lower().count('y')

print( numPY("pPoooyY") )

## 제곱근
def nextSqure(n):
    sqrt = n ** (1/2)

    if sqrt % 1 == 0:
        return (sqrt + 1) ** 2
    return 'no' 

## 하샤드 수
def Harshad(n):
    return n % sum(int(x) for x in str(n)) == 0


## 두 정수 사이의 값
def adder(a, b):
    if a > b:
        a, b = b, a
    return sum(range(a, b + 1))

## 음양 더하기
        # zip() 함수!!
def solution(absolutes, signs):
    answer=0
    for absolute,sign in zip(absolutes,signs):
        if sign:
            answer+=absolute
        else:
            answer-=absolute
    return answer

## 김서방 찾기
def findKim(seoul):
    # 함수를 완성하세요
    return "김서방은 {}에 있다".format(seoul.index('Kim'))

## 콜라츠 추출
def solution(num):
    count = 0
    
    while num != 1:
        if count == 500:
            return -1
        
        if num % 2 == 0:
            num //= 2
        else:
            num = num * 3 + 1
        
        count += 1
    
    return count

## 없는 숫자 더하기
def solution(numbers):
    return 45 - sum(numbers)


## 나누어 떨어지는 숫자 배열
def solution(arr,divisor):
    return sorted([n for n in arr if n % divisor == 0]) or [-1]
                                                        # or 앞이 참일 경우 해당 값까지만, 거짓일 경우 뒤에 호출       

## 내적 구하기
def solution(a, b):
    return sum([x*y for x, y in zip(a,b)])

## 약수의 개수와 덧셈
def solution(left,right):
    answer = 0
    for i in range(left,right+1):
        if int(i ** 0.5) == i ** 0.5:
            answer += i
        else:
            answer == i

## 문자열 내림차순
def solution(s):
        return "".join(sorted(s,reverse=True))
----------------------------------------------------------------------------------------------------------------------------------------
## 문자열 다루기
def alpha_string46(s):
    return s.isdigit() and len(s) in [4,6]

## 행렬 더하기
def sumMatrix(A,B):
    return [list(map(sum, zip(*x))) for x in zip(A, B)]
a = [[1],[2]]
b = [[4],[5]]
sumMatrix(a,b)

## 최대공약수와 최소공배수
    # 유클리드 호제법 : 두 정수의 최대 공약수를 구하는 알고리즘
def gcd(a, b):
    # 유클리드 호제법을 이용하여 최대공약수를 구함
    while b != 0:
        a, b = b, a % b
    return a
def lcm(a ,b):
    return a* b // gcd(a,b)

def solution(n,m):
    return [gcd(n,m),lcm(n,m)]

## 예산
def solution(d, budget):
    d = sorted(d)
    total = 0
    count = 0
    for cost in d:
        if cost + total <= budget:
            total += cost
            count += 1
        else:
            break
    return count
---------------------------------------------------------------------------------------------------------------------------------------------

# 이 문제에는 표준 입력으로 두 개의 정수 n과 m이 주어집니다.
  별(*) 문자를 이용해 가로의 길이가 n, 세로의 길이가 m인 직사각형 형태를 출력해보세요.
a, b = map(int, input().split()) # map 함수 : input에 함수를 적용해서 정수로 반환
for i in range(b):
    for j in range(a):
        print('*', end='') # end='' : 바로 붙어서 출력해줌
    print('')  # 개행 : 한줄 씩 출력

# 예시)
>>> a,b = input().split()
5 2
>>> a
'5'
>>> b
'2'

## divmod() : 몫과 나머지를 한번에 반환 ex) divmod(8,2) -> (4,0)(몫,나머지)
## n진수 -> 10진수
	ex) int(string, base) 
	ex) print(int('202',3) -> 51

# 자연수 n이 매개변수로 주어집니다. n을 3진법 상에서 앞뒤로 뒤집은 후, 이를 다시 10진법으로 표현한 수를 return 하도록 solution 함수를 완성해주세요.
def solution(n):
	answer = ' '
	while (n>=1):
		a = n // 3
		b = n % 3
		answer += str(a)
	return int(answer,3)

# 삼총사 문제
def solution(number):
    answer = 0
    l = len(number)
    for i in range(l-2):
        for j in range(i+1, l-1):
            for k in range(j+1, l):
                # print(number[i],number[j],number[k])
                if number[i]+number[j]+number[k] == 0:
                    answer += 1           
    return answer

---------------------------------------------------------------------------------------------------------------------------
# 07/10
<최소직사각형> : 가로,세로 비교해서 큰 값, 작은 값 분리 후 큰값 중에 max와 작은 값 중에 max를 곱한다
def solution(sizes):
    w = []
    h = []
    for i in range(len(sizes)):
        if sizes[i][0] > sizes[i][1]:
            w.append(sizes[i][0])
            h.append(sizes[i][1])
        else:
            w.append(sizes[i][1])
            h.append(sizes[i][0])
    return max(w) * max(h)

<시저암호> : .find / .rfind / rindex 함수 사용법 / 
		  : 아스키코드? 
def solution(s, n):
    answer = []
    lower = 'abcdefghijklmnopqrstuvwxyz'
    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    
    for i in s:
        if i == ' ':
            answer.append(' ')
        elif i.islower() is True:
            a = lower.find(i) + n
            answer.append(lower[a % 26])
        else:
            b = upper.find(i) + n
            answer.append(upper[b % 26])
    return ''.join(answer)

